CCS PCM C Compiler, Version 5.015, 5967               13-Feb-24 23:36

               Filename:   C:\Users\note book\Desktop\MainboardATS2\main.lst

               ROM used:   2271 words (28%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           31 (8%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 31,1D
0005:  DATA A0,29
0006:  DATA F4,30
0007:  DATA 72,3A
0008:  DATA 00,00
0009:  DATA 32,1D
000A:  DATA 20,2A
000B:  DATA E5,39
000C:  DATA 74,00
000D:  DATA 33,1D
000E:  DATA A0,29
000F:  DATA 65,3A
0010:  DATA F4,34
0011:  DATA EE,33
0012:  DATA 73,00
0013:  DATA 34,1D
0014:  DATA A0,26
0015:  DATA 6F,39
0016:  DATA 65,00
0017:  DATA 0C,29
0018:  DATA E5,30
0019:  DATA E4,3C
001A:  DATA 2E,17
001B:  DATA 2E,05
001C:  DATA 00,01
001D:  DATA 0C,00
001E:  DATA 0C,00
001F:  DATA 53,3A
0020:  DATA 61,39
0021:  DATA F4,34
0022:  DATA EE,33
0023:  DATA 2E,17
0024:  DATA 2E,00
0025:  DATA D4,32
0026:  DATA 73,3A
0027:  DATA 69,37
0028:  DATA 67,17
0029:  DATA 2E,17
002A:  DATA 00,01
002B:  DATA D4,32
002C:  DATA 73,3A
002D:  DATA 20,3A
002E:  DATA E8,32
002F:  DATA F4,30
0030:  DATA 00,01
0031:  DATA 65,39
0032:  DATA F2,37
0033:  DATA 72,00
0034:  DATA C4,27
0035:  DATA CE,22
0036:  DATA A1,10
0037:  DATA 21,00
0038:  DATA D4,22
0039:  DATA 53,2A
003A:  DATA 20,2C
003B:  DATA A0,20
003C:  DATA D8,24
003D:  DATA 53,00
003E:  DATA 65,39
003F:  DATA F2,37
0040:  DATA 72,00
0041:  DATA C4,27
0042:  DATA CE,22
0043:  DATA A1,10
0044:  DATA 21,00
0045:  DATA D4,22
0046:  DATA 53,2A
0047:  DATA 20,2D
0048:  DATA A0,20
0049:  DATA D8,24
004A:  DATA 53,00
004B:  DATA 65,39
004C:  DATA F2,37
004D:  DATA 72,00
004E:  DATA C4,27
004F:  DATA CE,22
0050:  DATA A1,10
0051:  DATA 21,00
0052:  DATA D3,32
0053:  DATA 74,3A
0054:  DATA 69,37
0055:  DATA E7,39
0056:  DATA 2E,17
0057:  DATA 2E,00
0058:  DATA CD,37
0059:  DATA F2,32
005A:  DATA A0,27
005B:  DATA 70,3A
005C:  DATA E9,37
005D:  DATA EE,39
005E:  DATA 2E,17
005F:  DATA 2E,00
0060:  DATA D4,22
0061:  DATA 53,2A
0062:  DATA 20,2C
0063:  DATA A0,20
0064:  DATA D8,24
0065:  DATA 53,00
0066:  DATA 0C,00
0067:  DATA 65,39
0068:  DATA F2,37
0069:  DATA 72,00
006A:  DATA 0C,00
006B:  DATA C4,27
006C:  DATA CE,22
006D:  DATA A1,10
006E:  DATA 21,00
006F:  DATA D4,32
0070:  DATA 73,3A
0071:  DATA 20,3A
0072:  DATA E8,32
0073:  DATA F4,30
0074:  DATA 00,01
0075:  DATA 0C,00
0076:  DATA 65,39
0077:  DATA F2,37
0078:  DATA 72,00
0079:  DATA 0C,00
007A:  DATA C4,27
007B:  DATA CE,22
007C:  DATA A1,10
007D:  DATA 21,00
007E:  DATA D4,22
007F:  DATA 53,2A
0080:  DATA 20,2D
0081:  DATA A0,20
0082:  DATA D8,24
0083:  DATA 53,00
0084:  DATA 0C,00
0085:  DATA 65,39
0086:  DATA F2,37
0087:  DATA 72,00
0088:  DATA 0C,00
0089:  DATA C4,27
008A:  DATA CE,22
008B:  DATA A1,10
008C:  DATA 21,00
008D:  DATA 38,17
008E:  DATA 2E,17
008F:  DATA 00,01
0090:  DATA 39,17
0091:  DATA 2E,17
0092:  DATA 00,01
0093:  DATA 30,17
0094:  DATA 2E,17
0095:  DATA 00,01
0096:  DATA 2A,17
0097:  DATA 2E,17
0098:  DATA 00,01
0099:  DATA 41,17
009A:  DATA 2E,17
009B:  DATA 00,01
009C:  DATA 42,17
009D:  DATA 2E,17
009E:  DATA 00,01
009F:  DATA 43,17
00A0:  DATA 2E,17
00A1:  DATA 00,01
00A2:  DATA 44,17
00A3:  DATA 2E,17
00A4:  DATA 00,01
00A5:  DATA 23,17
00A6:  DATA 2E,17
00A7:  DATA 00,01
00A8:  DATA 0C,00
*
025D:  MOVF   0B,W
025E:  MOVWF  28
025F:  BCF    0B.7
0260:  BSF    03.5
0261:  BSF    03.6
0262:  BSF    0C.7
0263:  BSF    0C.0
0264:  NOP
0265:  NOP
0266:  BCF    03.5
0267:  BCF    03.6
0268:  BTFSC  28.7
0269:  BSF    0B.7
026A:  BSF    03.6
026B:  MOVF   0C,W
026C:  ANDLW  7F
026D:  BTFSC  03.2
026E:  GOTO   2B1
026F:  BCF    03.6
0270:  MOVWF  28
0271:  BSF    03.6
0272:  MOVF   0D,W
0273:  BCF    03.6
0274:  MOVWF  29
0275:  BSF    03.6
0276:  MOVF   0F,W
0277:  BCF    03.6
0278:  MOVWF  2A
0279:  MOVF   28,W
027A:  MOVWF  2B
027B:  CALL   231
027C:  MOVF   29,W
027D:  BSF    03.6
027E:  MOVWF  0D
027F:  BCF    03.6
0280:  MOVF   2A,W
0281:  BSF    03.6
0282:  MOVWF  0F
0283:  BCF    03.6
0284:  MOVF   0B,W
0285:  MOVWF  2B
0286:  BCF    0B.7
0287:  BSF    03.5
0288:  BSF    03.6
0289:  BSF    0C.7
028A:  BSF    0C.0
028B:  NOP
028C:  NOP
028D:  BCF    03.5
028E:  BCF    03.6
028F:  BTFSC  2B.7
0290:  BSF    0B.7
0291:  BSF    03.6
0292:  RLF    0C,W
0293:  RLF    0E,W
0294:  ANDLW  7F
0295:  BTFSC  03.2
0296:  GOTO   2B1
0297:  BCF    03.6
0298:  MOVWF  28
0299:  BSF    03.6
029A:  MOVF   0D,W
029B:  BCF    03.6
029C:  MOVWF  29
029D:  BSF    03.6
029E:  MOVF   0F,W
029F:  BCF    03.6
02A0:  MOVWF  2A
02A1:  MOVF   28,W
02A2:  MOVWF  2B
02A3:  CALL   231
02A4:  MOVF   29,W
02A5:  BSF    03.6
02A6:  MOVWF  0D
02A7:  BCF    03.6
02A8:  MOVF   2A,W
02A9:  BSF    03.6
02AA:  MOVWF  0F
02AB:  INCF   0D,F
02AC:  BTFSC  03.2
02AD:  INCF   0F,F
02AE:  BCF    03.6
02AF:  GOTO   25D
02B0:  BSF    03.6
02B1:  BCF    03.6
02B2:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
....................  
.................... #use delay(crystal=4000000) 
*
00BF:  MOVLW  2D
00C0:  MOVWF  04
00C1:  BCF    03.7
00C2:  MOVF   00,W
00C3:  BTFSC  03.2
00C4:  GOTO   0D3
00C5:  MOVLW  01
00C6:  MOVWF  78
00C7:  CLRF   77
00C8:  DECFSZ 77,F
00C9:  GOTO   0C8
00CA:  DECFSZ 78,F
00CB:  GOTO   0C7
00CC:  MOVLW  4A
00CD:  MOVWF  77
00CE:  DECFSZ 77,F
00CF:  GOTO   0CE
00D0:  GOTO   0D1
00D1:  DECFSZ 00,F
00D2:  GOTO   0C5
00D3:  RETURN
.................... #use FIXED_IO( A_outputs=PIN_A0 ) 
....................  
.................... #define LED   PIN_A0 
.................... #define LCD_ENABLE_PIN PIN_C5 
.................... #define LCD_RS_PIN PIN_C4 
.................... #define LCD_RW_PIN PIN_C6 
.................... #define LCD_DATA4 PIN_D4 
.................... #define LCD_DATA5 PIN_D5 
.................... #define LCD_DATA6 PIN_D6 
.................... #define LCD_DATA7 PIN_D7 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0148:  BSF    08.4
....................    output_float(LCD_DATA5); 
0149:  BSF    08.5
....................    output_float(LCD_DATA6); 
014A:  BSF    08.6
....................    output_float(LCD_DATA7); 
014B:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
014C:  BCF    03.5
014D:  BSF    07.6
014E:  BCF    20.6
014F:  MOVF   20,W
0150:  BSF    03.5
0151:  MOVWF  07
....................    delay_cycles(1); 
0152:  NOP
....................    lcd_output_enable(1); 
0153:  BCF    03.5
0154:  BSF    07.5
0155:  BCF    20.5
0156:  MOVF   20,W
0157:  BSF    03.5
0158:  MOVWF  07
....................    delay_cycles(1); 
0159:  NOP
....................    high = lcd_read_nibble(); 
015A:  BCF    03.5
015B:  CALL   103
015C:  MOVF   78,W
015D:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
015E:  BCF    07.5
015F:  BCF    20.5
0160:  MOVF   20,W
0161:  BSF    03.5
0162:  MOVWF  07
....................    delay_cycles(1); 
0163:  NOP
....................    lcd_output_enable(1); 
0164:  BCF    03.5
0165:  BSF    07.5
0166:  BCF    20.5
0167:  MOVF   20,W
0168:  BSF    03.5
0169:  MOVWF  07
....................    delay_us(1); 
016A:  NOP
....................    low = lcd_read_nibble(); 
016B:  BCF    03.5
016C:  CALL   103
016D:  MOVF   78,W
016E:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
016F:  BCF    07.5
0170:  BCF    20.5
0171:  MOVF   20,W
0172:  BSF    03.5
0173:  MOVWF  07
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0174:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0175:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0176:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0177:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0178:  BCF    03.5
0179:  SWAPF  33,W
017A:  MOVWF  77
017B:  MOVLW  F0
017C:  ANDWF  77,F
017D:  MOVF   77,W
017E:  IORWF  32,W
017F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0103:  CLRF   34
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0104:  BSF    03.5
0105:  BSF    08.4
0106:  MOVLW  00
0107:  BCF    03.5
0108:  BTFSC  08.4
0109:  MOVLW  01
010A:  IORWF  34,F
....................    n |= input(LCD_DATA5) << 1; 
010B:  BSF    03.5
010C:  BSF    08.5
010D:  MOVLW  00
010E:  BCF    03.5
010F:  BTFSC  08.5
0110:  MOVLW  01
0111:  MOVWF  77
0112:  BCF    03.0
0113:  RLF    77,F
0114:  MOVF   77,W
0115:  IORWF  34,F
....................    n |= input(LCD_DATA6) << 2; 
0116:  BSF    03.5
0117:  BSF    08.6
0118:  MOVLW  00
0119:  BCF    03.5
011A:  BTFSC  08.6
011B:  MOVLW  01
011C:  MOVWF  77
011D:  RLF    77,F
011E:  RLF    77,F
011F:  MOVLW  FC
0120:  ANDWF  77,F
0121:  MOVF   77,W
0122:  IORWF  34,F
....................    n |= input(LCD_DATA7) << 3; 
0123:  BSF    03.5
0124:  BSF    08.7
0125:  MOVLW  00
0126:  BCF    03.5
0127:  BTFSC  08.7
0128:  MOVLW  01
0129:  MOVWF  77
012A:  RLF    77,F
012B:  RLF    77,F
012C:  RLF    77,F
012D:  MOVLW  F8
012E:  ANDWF  77,F
012F:  MOVF   77,W
0130:  IORWF  34,F
....................     
....................    return(n); 
0131:  MOVF   34,W
0132:  MOVWF  78
....................   #else 
0133:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00D4:  BTFSC  33.0
00D5:  GOTO   0D8
00D6:  BCF    08.4
00D7:  GOTO   0D9
00D8:  BSF    08.4
00D9:  BSF    03.5
00DA:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00DB:  BCF    03.5
00DC:  BTFSC  33.1
00DD:  GOTO   0E0
00DE:  BCF    08.5
00DF:  GOTO   0E1
00E0:  BSF    08.5
00E1:  BSF    03.5
00E2:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00E3:  BCF    03.5
00E4:  BTFSC  33.2
00E5:  GOTO   0E8
00E6:  BCF    08.6
00E7:  GOTO   0E9
00E8:  BSF    08.6
00E9:  BSF    03.5
00EA:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00EB:  BCF    03.5
00EC:  BTFSC  33.3
00ED:  GOTO   0F0
00EE:  BCF    08.7
00EF:  GOTO   0F1
00F0:  BSF    08.7
00F1:  BSF    03.5
00F2:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00F3:  NOP
....................    lcd_output_enable(1); 
00F4:  BCF    03.5
00F5:  BSF    07.5
00F6:  BCF    20.5
00F7:  MOVF   20,W
00F8:  BSF    03.5
00F9:  MOVWF  07
....................    delay_us(2); 
00FA:  GOTO   0FB
....................    lcd_output_enable(0); 
00FB:  BCF    03.5
00FC:  BCF    07.5
00FD:  BCF    20.5
00FE:  MOVF   20,W
00FF:  BSF    03.5
0100:  MOVWF  07
0101:  BCF    03.5
0102:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0134:  BCF    20.5
0135:  MOVF   20,W
0136:  BSF    03.5
0137:  MOVWF  07
....................    lcd_rs_tris(); 
0138:  BCF    03.5
0139:  BCF    20.4
013A:  MOVF   20,W
013B:  BSF    03.5
013C:  MOVWF  07
....................    lcd_rw_tris(); 
013D:  BCF    03.5
013E:  BCF    20.6
013F:  MOVF   20,W
0140:  BSF    03.5
0141:  MOVWF  07
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0142:  BCF    03.5
0143:  BCF    07.4
0144:  BCF    20.4
0145:  MOVF   20,W
0146:  BSF    03.5
0147:  MOVWF  07
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0180:  MOVF   78,W
0181:  MOVWF  32
0182:  BTFSS  32.7
0183:  GOTO   186
0184:  BSF    03.5
0185:  GOTO   148
....................    lcd_output_rs(address); 
0186:  MOVF   30,F
0187:  BTFSS  03.2
0188:  GOTO   18B
0189:  BCF    07.4
018A:  GOTO   18C
018B:  BSF    07.4
018C:  BCF    20.4
018D:  MOVF   20,W
018E:  BSF    03.5
018F:  MOVWF  07
....................    delay_cycles(1); 
0190:  NOP
....................    lcd_output_rw(0); 
0191:  BCF    03.5
0192:  BCF    07.6
0193:  BCF    20.6
0194:  MOVF   20,W
0195:  BSF    03.5
0196:  MOVWF  07
....................    delay_cycles(1); 
0197:  NOP
....................    lcd_output_enable(0); 
0198:  BCF    03.5
0199:  BCF    07.5
019A:  BCF    20.5
019B:  MOVF   20,W
019C:  BSF    03.5
019D:  MOVWF  07
....................    lcd_send_nibble(n >> 4); 
019E:  BCF    03.5
019F:  SWAPF  31,W
01A0:  MOVWF  32
01A1:  MOVLW  0F
01A2:  ANDWF  32,F
01A3:  MOVF   32,W
01A4:  MOVWF  33
01A5:  CALL   0D4
....................    lcd_send_nibble(n & 0xf); 
01A6:  MOVF   31,W
01A7:  ANDLW  0F
01A8:  MOVWF  32
01A9:  MOVWF  33
01AA:  CALL   0D4
01AB:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01AC:  MOVLW  28
01AD:  MOVWF  29
01AE:  MOVLW  0C
01AF:  MOVWF  2A
01B0:  MOVLW  01
01B1:  MOVWF  2B
01B2:  MOVLW  06
01B3:  MOVWF  2C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01B4:  BCF    07.5
01B5:  BCF    20.5
01B6:  MOVF   20,W
01B7:  BSF    03.5
01B8:  MOVWF  07
....................    lcd_output_rs(0); 
01B9:  BCF    03.5
01BA:  BCF    07.4
01BB:  BCF    20.4
01BC:  MOVF   20,W
01BD:  BSF    03.5
01BE:  MOVWF  07
....................    lcd_output_rw(0); 
01BF:  BCF    03.5
01C0:  BCF    07.6
01C1:  BCF    20.6
01C2:  MOVF   20,W
01C3:  BSF    03.5
01C4:  MOVWF  07
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01C5:  BCF    08.4
....................    output_drive(LCD_DATA5); 
01C6:  BCF    08.5
....................    output_drive(LCD_DATA6); 
01C7:  BCF    08.6
....................    output_drive(LCD_DATA7); 
01C8:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01C9:  BCF    03.5
01CA:  BCF    20.5
01CB:  MOVF   20,W
01CC:  BSF    03.5
01CD:  MOVWF  07
....................    lcd_rs_tris(); 
01CE:  BCF    03.5
01CF:  BCF    20.4
01D0:  MOVF   20,W
01D1:  BSF    03.5
01D2:  MOVWF  07
....................    lcd_rw_tris(); 
01D3:  BCF    03.5
01D4:  BCF    20.6
01D5:  MOVF   20,W
01D6:  BSF    03.5
01D7:  MOVWF  07
....................  #endif 
....................      
....................    delay_ms(15); 
01D8:  MOVLW  0F
01D9:  BCF    03.5
01DA:  MOVWF  2D
01DB:  CALL   0BF
....................    for(i=1;i<=3;++i) 
01DC:  MOVLW  01
01DD:  MOVWF  28
01DE:  MOVF   28,W
01DF:  SUBLW  03
01E0:  BTFSS  03.0
01E1:  GOTO   1EA
....................    { 
....................        lcd_send_nibble(3); 
01E2:  MOVLW  03
01E3:  MOVWF  33
01E4:  CALL   0D4
....................        delay_ms(5); 
01E5:  MOVLW  05
01E6:  MOVWF  2D
01E7:  CALL   0BF
01E8:  INCF   28,F
01E9:  GOTO   1DE
....................    } 
....................     
....................    lcd_send_nibble(2); 
01EA:  MOVLW  02
01EB:  MOVWF  33
01EC:  CALL   0D4
....................    delay_ms(5); 
01ED:  MOVLW  05
01EE:  MOVWF  2D
01EF:  CALL   0BF
....................    for(i=0;i<=3;++i) 
01F0:  CLRF   28
01F1:  MOVF   28,W
01F2:  SUBLW  03
01F3:  BTFSS  03.0
01F4:  GOTO   201
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01F5:  MOVLW  29
01F6:  ADDWF  28,W
01F7:  MOVWF  04
01F8:  BCF    03.7
01F9:  MOVF   00,W
01FA:  MOVWF  2D
01FB:  CLRF   30
01FC:  MOVF   2D,W
01FD:  MOVWF  31
01FE:  CALL   134
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01FF:  INCF   28,F
0200:  GOTO   1F1
0201:  BSF    0A.3
0202:  BCF    0A.4
0203:  GOTO   013 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
021F:  DECFSZ 2D,W
0220:  GOTO   222
0221:  GOTO   225
....................       address=LCD_LINE_TWO; 
0222:  MOVLW  40
0223:  MOVWF  2E
0224:  GOTO   226
....................    else 
....................       address=0; 
0225:  CLRF   2E
....................       
....................    address+=x-1; 
0226:  MOVLW  01
0227:  SUBWF  2C,W
0228:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
0229:  MOVF   2E,W
022A:  IORLW  80
022B:  MOVWF  2F
022C:  CLRF   30
022D:  MOVF   2F,W
022E:  MOVWF  31
022F:  CALL   134
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0230:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0231:  MOVF   2B,W
0232:  XORLW  07
0233:  BTFSC  03.2
0234:  GOTO   23F
0235:  XORLW  0B
0236:  BTFSC  03.2
0237:  GOTO   244
0238:  XORLW  06
0239:  BTFSC  03.2
023A:  GOTO   24C
023B:  XORLW  02
023C:  BTFSC  03.2
023D:  GOTO   252
023E:  GOTO   257
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
023F:  MOVLW  01
0240:  MOVWF  2C
0241:  MOVWF  2D
0242:  CALL   21F
0243:  GOTO   25C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0244:  CLRF   30
0245:  MOVLW  01
0246:  MOVWF  31
0247:  CALL   134
....................                      delay_ms(2); 
0248:  MOVLW  02
0249:  MOVWF  2D
024A:  CALL   0BF
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
024B:  GOTO   25C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
024C:  MOVLW  01
024D:  MOVWF  2C
024E:  MOVLW  02
024F:  MOVWF  2D
0250:  CALL   21F
0251:  GOTO   25C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0252:  CLRF   30
0253:  MOVLW  10
0254:  MOVWF  31
0255:  CALL   134
0256:  GOTO   25C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0257:  MOVLW  01
0258:  MOVWF  30
0259:  MOVF   2B,W
025A:  MOVWF  31
025B:  CALL   134
....................      #endif 
....................    } 
025C:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Define keypad pins 
.................... #define ROW1 PIN_B7 
.................... #define ROW2 PIN_B6 
.................... #define ROW3 PIN_B5 
.................... #define ROW4 PIN_B4 
.................... #define COL1 PIN_B3 
.................... #define COL2 PIN_B2 
.................... #define COL3 PIN_B1 
.................... #define COL4 PIN_B0 
.................... #include "communication.h" 
.................... #ifndef COMMUNICATION_H 
.................... #define COMMUNICATION_H 
....................  
.................... //HANDSHAKE to be implemented 
.................... //theta motor to be implemented 
....................  
.................... char GoToZComplement() 
.................... { 
....................    output_high(PIN_D2); 
*
0523:  BSF    03.5
0524:  BCF    08.2
0525:  BCF    03.5
0526:  BSF    08.2
....................    delay_ms(15); 
0527:  MOVLW  0F
0528:  MOVWF  2D
0529:  CALL   0BF
....................    if(input(PIN_C3)) 
052A:  BSF    20.3
052B:  MOVF   20,W
052C:  BSF    03.5
052D:  MOVWF  07
052E:  BCF    03.5
052F:  BTFSS  07.3
0530:  GOTO   538
....................    { 
....................       output_low(PIN_D2); 
0531:  BSF    03.5
0532:  BCF    08.2
0533:  BCF    03.5
0534:  BCF    08.2
....................       return 0;    
0535:  MOVLW  00
0536:  MOVWF  78
0537:  GOTO   53E
....................    } 
....................     
....................    output_low(PIN_D2); 
0538:  BSF    03.5
0539:  BCF    08.2
053A:  BCF    03.5
053B:  BCF    08.2
....................    return 1; //error 
053C:  MOVLW  01
053D:  MOVWF  78
053E:  RETURN
.................... } 
....................  
.................... char GoToNextX() 
.................... {    
....................    //START 
....................    output_high(PIN_D1); 
*
0509:  BSF    03.5
050A:  BCF    08.1
050B:  BCF    03.5
050C:  BSF    08.1
....................    delay_ms(50); 
050D:  MOVLW  32
050E:  MOVWF  2D
050F:  CALL   0BF
....................    if(input(PIN_D0)) 
0510:  BSF    03.5
0511:  BSF    08.0
0512:  BCF    03.5
0513:  BTFSS  08.0
0514:  GOTO   51C
....................    { 
....................       output_low(PIN_D1); 
0515:  BSF    03.5
0516:  BCF    08.1
0517:  BCF    03.5
0518:  BCF    08.1
....................       return 0;   
0519:  MOVLW  00
051A:  MOVWF  78
051B:  GOTO   522
....................    } 
....................    output_low(PIN_D1); 
051C:  BSF    03.5
051D:  BCF    08.1
051E:  BCF    03.5
051F:  BCF    08.1
....................    return 1; 
0520:  MOVLW  01
0521:  MOVWF  78
0522:  RETURN
.................... } 
....................  
.................... char nextTheta() 
.................... { 
....................    output_high(PIN_A1); 
*
04EB:  MOVLW  FE
04EC:  BSF    03.5
04ED:  MOVWF  05
04EE:  BCF    03.5
04EF:  BSF    05.1
....................    delay_ms(50); 
04F0:  MOVLW  32
04F1:  MOVWF  2D
04F2:  CALL   0BF
....................    if(input(PIN_A2)) 
04F3:  MOVLW  FE
04F4:  BSF    03.5
04F5:  MOVWF  05
04F6:  BCF    03.5
04F7:  BTFSS  05.2
04F8:  GOTO   501
....................    { 
....................       output_low(PIN_A1); 
04F9:  MOVLW  FE
04FA:  BSF    03.5
04FB:  MOVWF  05
04FC:  BCF    03.5
04FD:  BCF    05.1
....................       return 0; 
04FE:  MOVLW  00
04FF:  MOVWF  78
0500:  GOTO   508
....................    } 
....................    output_low(PIN_A1); 
0501:  MOVLW  FE
0502:  BSF    03.5
0503:  MOVWF  05
0504:  BCF    03.5
0505:  BCF    05.1
....................    return 1; 
0506:  MOVLW  01
0507:  MOVWF  78
0508:  RETURN
.................... } 
.................... #endif  // KEYPAD_H 
....................  
....................  
.................... void keypadinit() 
.................... { 
....................     
....................   // initialize GPIO for the keypad 
....................     output_high(ROW1); 
*
00A9:  BSF    03.5
00AA:  BCF    06.7
00AB:  BCF    03.5
00AC:  BSF    06.7
....................     output_high(ROW2); 
00AD:  BSF    03.5
00AE:  BCF    06.6
00AF:  BCF    03.5
00B0:  BSF    06.6
....................     output_high(ROW3); 
00B1:  BSF    03.5
00B2:  BCF    06.5
00B3:  BCF    03.5
00B4:  BSF    06.5
....................     output_high(ROW4); 
00B5:  BSF    03.5
00B6:  BCF    06.4
00B7:  BCF    03.5
00B8:  BSF    06.4
....................     port_b_pullups(1); 
00B9:  BSF    03.5
00BA:  BCF    01.7
00BB:  BCF    03.5
00BC:  BSF    0A.3
00BD:  BCF    0A.4
00BE:  GOTO   010 (RETURN)
.................... } 
....................  
.................... void ledcheck() 
.................... { 
....................    //led 
....................     output_high(PIN_A0); 
*
0204:  MOVLW  FE
0205:  BSF    03.5
0206:  MOVWF  05
0207:  BCF    03.5
0208:  BSF    05.0
....................     delay_ms(1000); 
0209:  MOVLW  04
020A:  MOVWF  28
020B:  MOVLW  FA
020C:  MOVWF  2D
020D:  CALL   0BF
020E:  DECFSZ 28,F
020F:  GOTO   20B
....................     output_low(PIN_A0); 
0210:  MOVLW  FE
0211:  BSF    03.5
0212:  MOVWF  05
0213:  BCF    03.5
0214:  BCF    05.0
....................     delay_ms(1000); 
0215:  MOVLW  04
0216:  MOVWF  28
0217:  MOVLW  FA
0218:  MOVWF  2D
0219:  CALL   0BF
021A:  DECFSZ 28,F
021B:  GOTO   217
021C:  BSF    0A.3
021D:  BCF    0A.4
021E:  GOTO   016 (RETURN)
.................... } 
....................  
.................... void lcdDisplayMenu(){ 
....................      lcd_gotoxy(1, 1); 
*
02B3:  MOVLW  01
02B4:  MOVWF  2C
02B5:  MOVWF  2D
02B6:  CALL   21F
....................      printf(lcd_putc,"1: Start"); 
02B7:  MOVLW  04
02B8:  BSF    03.6
02B9:  MOVWF  0D
02BA:  MOVLW  00
02BB:  MOVWF  0F
02BC:  BCF    03.6
02BD:  CALL   25D
....................      lcd_gotoxy(1, 2); 
02BE:  MOVLW  01
02BF:  MOVWF  2C
02C0:  MOVLW  02
02C1:  MOVWF  2D
02C2:  CALL   21F
....................      printf(lcd_putc,"2: Test"); 
02C3:  MOVLW  09
02C4:  BSF    03.6
02C5:  MOVWF  0D
02C6:  MOVLW  00
02C7:  MOVWF  0F
02C8:  BCF    03.6
02C9:  CALL   25D
....................      lcd_gotoxy(21, 1); 
02CA:  MOVLW  15
02CB:  MOVWF  2C
02CC:  MOVLW  01
02CD:  MOVWF  2D
02CE:  CALL   21F
....................      printf(lcd_putc,"3: Settings"); 
02CF:  MOVLW  0D
02D0:  BSF    03.6
02D1:  MOVWF  0D
02D2:  MOVLW  00
02D3:  MOVWF  0F
02D4:  BCF    03.6
02D5:  CALL   25D
....................      lcd_gotoxy(21, 2); 
02D6:  MOVLW  15
02D7:  MOVWF  2C
02D8:  MOVLW  02
02D9:  MOVWF  2D
02DA:  CALL   21F
....................      printf(lcd_putc,"4: More"); 
02DB:  MOVLW  13
02DC:  BSF    03.6
02DD:  MOVWF  0D
02DE:  MOVLW  00
02DF:  MOVWF  0F
02E0:  BCF    03.6
02E1:  CALL   25D
02E2:  BSF    0A.3
02E3:  BCF    0A.4
02E4:  GOTO   03B (RETURN)
.................... } 
....................  
.................... char keypadScan(char key) 
02E5:  CLRF   29
.................... { 
....................    int count=0;   
....................     output_low(ROW1); 
02E6:  BSF    03.5
02E7:  BCF    06.7
02E8:  BCF    03.5
02E9:  BCF    06.7
....................     if (!input(COL1)) 
02EA:  BSF    03.5
02EB:  BSF    06.3
02EC:  BCF    03.5
02ED:  BTFSC  06.3
02EE:  GOTO   301
....................     { 
....................       for(int i=0; i<100 ;i++) 
02EF:  CLRF   2A
02F0:  MOVF   2A,W
02F1:  SUBLW  63
02F2:  BTFSS  03.0
02F3:  GOTO   2FB
....................       { 
....................          if (!input(COL1)) 
02F4:  BSF    03.5
02F5:  BSF    06.3
02F6:  BCF    03.5
02F7:  BTFSS  06.3
....................             count++; 
02F8:  INCF   29,F
02F9:  INCF   2A,F
02FA:  GOTO   2F0
....................       } 
....................       if(count>50) 
02FB:  MOVF   29,W
02FC:  SUBLW  32
02FD:  BTFSC  03.0
02FE:  GOTO   301
....................       {  key= '1';   }   
02FF:  MOVLW  31
0300:  MOVWF  28
....................     } 
....................     count=0; 
0301:  CLRF   29
....................     output_high(ROW1); 
0302:  BSF    03.5
0303:  BCF    06.7
0304:  BCF    03.5
0305:  BSF    06.7
.................... ///     
....................     output_low(ROW2); 
0306:  BSF    03.5
0307:  BCF    06.6
0308:  BCF    03.5
0309:  BCF    06.6
....................     if (!input(COL1)) 
030A:  BSF    03.5
030B:  BSF    06.3
030C:  BCF    03.5
030D:  BTFSC  06.3
030E:  GOTO   321
....................     { 
....................       for(int i=0; i<100 ;i++) 
030F:  CLRF   2B
0310:  MOVF   2B,W
0311:  SUBLW  63
0312:  BTFSS  03.0
0313:  GOTO   31B
....................       { 
....................          if (!input(COL1)) 
0314:  BSF    03.5
0315:  BSF    06.3
0316:  BCF    03.5
0317:  BTFSS  06.3
....................             count++; 
0318:  INCF   29,F
0319:  INCF   2B,F
031A:  GOTO   310
....................       } 
....................       if(count>50) 
031B:  MOVF   29,W
031C:  SUBLW  32
031D:  BTFSC  03.0
031E:  GOTO   321
....................       {  key= '4';   }   
031F:  MOVLW  34
0320:  MOVWF  28
....................     } 
....................     count=0; 
0321:  CLRF   29
....................     output_high(ROW2);    
0322:  BSF    03.5
0323:  BCF    06.6
0324:  BCF    03.5
0325:  BSF    06.6
.................... ///         
....................     output_low(ROW3); 
0326:  BSF    03.5
0327:  BCF    06.5
0328:  BCF    03.5
0329:  BCF    06.5
....................     if (!input(COL1)) 
032A:  BSF    03.5
032B:  BSF    06.3
032C:  BCF    03.5
032D:  BTFSC  06.3
032E:  GOTO   341
....................     { 
....................       for(int i=0; i<100 ;i++) 
032F:  CLRF   2C
0330:  MOVF   2C,W
0331:  SUBLW  63
0332:  BTFSS  03.0
0333:  GOTO   33B
....................       { 
....................          if (!input(COL1)) 
0334:  BSF    03.5
0335:  BSF    06.3
0336:  BCF    03.5
0337:  BTFSS  06.3
....................             count++; 
0338:  INCF   29,F
0339:  INCF   2C,F
033A:  GOTO   330
....................       } 
....................       if(count>50) 
033B:  MOVF   29,W
033C:  SUBLW  32
033D:  BTFSC  03.0
033E:  GOTO   341
....................       {  key= '7';   }   
033F:  MOVLW  37
0340:  MOVWF  28
....................     } 
....................     count=0; 
0341:  CLRF   29
....................     output_high(ROW3); 
0342:  BSF    03.5
0343:  BCF    06.5
0344:  BCF    03.5
0345:  BSF    06.5
.................... ///        
....................     output_low(ROW4); 
0346:  BSF    03.5
0347:  BCF    06.4
0348:  BCF    03.5
0349:  BCF    06.4
....................     if (!input(COL1)) 
034A:  BSF    03.5
034B:  BSF    06.3
034C:  BCF    03.5
034D:  BTFSC  06.3
034E:  GOTO   361
....................     { 
....................       for(int i=0; i<100 ;i++) 
034F:  CLRF   2D
0350:  MOVF   2D,W
0351:  SUBLW  63
0352:  BTFSS  03.0
0353:  GOTO   35B
....................       { 
....................          if (!input(COL1)) 
0354:  BSF    03.5
0355:  BSF    06.3
0356:  BCF    03.5
0357:  BTFSS  06.3
....................             count++; 
0358:  INCF   29,F
0359:  INCF   2D,F
035A:  GOTO   350
....................       } 
....................       if(count>50) 
035B:  MOVF   29,W
035C:  SUBLW  32
035D:  BTFSC  03.0
035E:  GOTO   361
....................       {  key= '*';   }   
035F:  MOVLW  2A
0360:  MOVWF  28
....................     } 
....................     count=0; 
0361:  CLRF   29
....................     output_high(ROW4); 
0362:  BSF    03.5
0363:  BCF    06.4
0364:  BCF    03.5
0365:  BSF    06.4
....................  /////////////////////////////////////////    
....................     output_low(ROW1); 
0366:  BSF    03.5
0367:  BCF    06.7
0368:  BCF    03.5
0369:  BCF    06.7
....................     if (!input(COL2)) 
036A:  BSF    03.5
036B:  BSF    06.2
036C:  BCF    03.5
036D:  BTFSC  06.2
036E:  GOTO   381
....................     { 
....................       for(int i=0; i<100 ;i++) 
036F:  CLRF   2E
0370:  MOVF   2E,W
0371:  SUBLW  63
0372:  BTFSS  03.0
0373:  GOTO   37B
....................       { 
....................          if (!input(COL2)) 
0374:  BSF    03.5
0375:  BSF    06.2
0376:  BCF    03.5
0377:  BTFSS  06.2
....................             count++; 
0378:  INCF   29,F
0379:  INCF   2E,F
037A:  GOTO   370
....................       } 
....................       if(count>50) 
037B:  MOVF   29,W
037C:  SUBLW  32
037D:  BTFSC  03.0
037E:  GOTO   381
....................       {  key= '2';   }   
037F:  MOVLW  32
0380:  MOVWF  28
....................     } 
....................     count=0; 
0381:  CLRF   29
....................     output_high(ROW1); 
0382:  BSF    03.5
0383:  BCF    06.7
0384:  BCF    03.5
0385:  BSF    06.7
.................... ////     
....................     output_low(ROW2); 
0386:  BSF    03.5
0387:  BCF    06.6
0388:  BCF    03.5
0389:  BCF    06.6
....................     if (!input(COL2)) 
038A:  BSF    03.5
038B:  BSF    06.2
038C:  BCF    03.5
038D:  BTFSC  06.2
038E:  GOTO   3A1
....................     { 
....................       for(int i=0; i<100 ;i++) 
038F:  CLRF   2F
0390:  MOVF   2F,W
0391:  SUBLW  63
0392:  BTFSS  03.0
0393:  GOTO   39B
....................       { 
....................          if (!input(COL2)) 
0394:  BSF    03.5
0395:  BSF    06.2
0396:  BCF    03.5
0397:  BTFSS  06.2
....................             count++; 
0398:  INCF   29,F
0399:  INCF   2F,F
039A:  GOTO   390
....................       } 
....................       if(count>50) 
039B:  MOVF   29,W
039C:  SUBLW  32
039D:  BTFSC  03.0
039E:  GOTO   3A1
....................       {  key= '5';   }   
039F:  MOVLW  35
03A0:  MOVWF  28
....................     } 
....................     count=0; 
03A1:  CLRF   29
....................     output_high(ROW2); 
03A2:  BSF    03.5
03A3:  BCF    06.6
03A4:  BCF    03.5
03A5:  BSF    06.6
.................... ///       
....................     output_low(ROW3); 
03A6:  BSF    03.5
03A7:  BCF    06.5
03A8:  BCF    03.5
03A9:  BCF    06.5
....................     if (!input(COL2)) 
03AA:  BSF    03.5
03AB:  BSF    06.2
03AC:  BCF    03.5
03AD:  BTFSC  06.2
03AE:  GOTO   3C1
....................     { 
....................       for(int i=0; i<100 ;i++) 
03AF:  CLRF   30
03B0:  MOVF   30,W
03B1:  SUBLW  63
03B2:  BTFSS  03.0
03B3:  GOTO   3BB
....................       { 
....................          if (!input(COL2)) 
03B4:  BSF    03.5
03B5:  BSF    06.2
03B6:  BCF    03.5
03B7:  BTFSS  06.2
....................             count++; 
03B8:  INCF   29,F
03B9:  INCF   30,F
03BA:  GOTO   3B0
....................       } 
....................       if(count>50) 
03BB:  MOVF   29,W
03BC:  SUBLW  32
03BD:  BTFSC  03.0
03BE:  GOTO   3C1
....................       {  key= '8';   }   
03BF:  MOVLW  38
03C0:  MOVWF  28
....................     } 
....................     count=0; 
03C1:  CLRF   29
....................     output_high(ROW3); 
03C2:  BSF    03.5
03C3:  BCF    06.5
03C4:  BCF    03.5
03C5:  BSF    06.5
.................... ////        
....................     output_low(ROW4); 
03C6:  BSF    03.5
03C7:  BCF    06.4
03C8:  BCF    03.5
03C9:  BCF    06.4
....................     if (!input(COL2)) 
03CA:  BSF    03.5
03CB:  BSF    06.2
03CC:  BCF    03.5
03CD:  BTFSC  06.2
03CE:  GOTO   3E1
....................     { 
....................       for(int i=0; i<100 ;i++) 
03CF:  CLRF   31
03D0:  MOVF   31,W
03D1:  SUBLW  63
03D2:  BTFSS  03.0
03D3:  GOTO   3DB
....................       { 
....................          if (!input(COL2)) 
03D4:  BSF    03.5
03D5:  BSF    06.2
03D6:  BCF    03.5
03D7:  BTFSS  06.2
....................             count++; 
03D8:  INCF   29,F
03D9:  INCF   31,F
03DA:  GOTO   3D0
....................       } 
....................       if(count>50) 
03DB:  MOVF   29,W
03DC:  SUBLW  32
03DD:  BTFSC  03.0
03DE:  GOTO   3E1
....................       {  key= '0';   }   
03DF:  MOVLW  30
03E0:  MOVWF  28
....................     } 
....................     count=0; 
03E1:  CLRF   29
....................     output_high(ROW4); 
03E2:  BSF    03.5
03E3:  BCF    06.4
03E4:  BCF    03.5
03E5:  BSF    06.4
.................... ////////////////////////////////////////////////        
....................     output_low(ROW1); 
03E6:  BSF    03.5
03E7:  BCF    06.7
03E8:  BCF    03.5
03E9:  BCF    06.7
....................     if (!input(COL3)) 
03EA:  BSF    03.5
03EB:  BSF    06.1
03EC:  BCF    03.5
03ED:  BTFSC  06.1
03EE:  GOTO   401
....................     { 
....................       for(int i=0; i<100 ;i++) 
03EF:  CLRF   32
03F0:  MOVF   32,W
03F1:  SUBLW  63
03F2:  BTFSS  03.0
03F3:  GOTO   3FB
....................       { 
....................          if (!input(COL3)) 
03F4:  BSF    03.5
03F5:  BSF    06.1
03F6:  BCF    03.5
03F7:  BTFSS  06.1
....................             count++; 
03F8:  INCF   29,F
03F9:  INCF   32,F
03FA:  GOTO   3F0
....................       } 
....................       if(count>50) 
03FB:  MOVF   29,W
03FC:  SUBLW  32
03FD:  BTFSC  03.0
03FE:  GOTO   401
....................       {  key= '3';   }   
03FF:  MOVLW  33
0400:  MOVWF  28
....................     } 
....................     count=0; 
0401:  CLRF   29
....................     output_high(ROW1); 
0402:  BSF    03.5
0403:  BCF    06.7
0404:  BCF    03.5
0405:  BSF    06.7
....................      
....................     output_low(ROW2); 
0406:  BSF    03.5
0407:  BCF    06.6
0408:  BCF    03.5
0409:  BCF    06.6
....................     if (!input(COL3)) 
040A:  BSF    03.5
040B:  BSF    06.1
040C:  BCF    03.5
040D:  BTFSC  06.1
040E:  GOTO   421
....................     { 
....................       for(int i=0; i<100 ;i++) 
040F:  CLRF   33
0410:  MOVF   33,W
0411:  SUBLW  63
0412:  BTFSS  03.0
0413:  GOTO   41B
....................       { 
....................          if (!input(COL3)) 
0414:  BSF    03.5
0415:  BSF    06.1
0416:  BCF    03.5
0417:  BTFSS  06.1
....................             count++; 
0418:  INCF   29,F
0419:  INCF   33,F
041A:  GOTO   410
....................       } 
....................       if(count>50) 
041B:  MOVF   29,W
041C:  SUBLW  32
041D:  BTFSC  03.0
041E:  GOTO   421
....................       {  key= '6';   }   
041F:  MOVLW  36
0420:  MOVWF  28
....................     } 
....................     count=0; 
0421:  CLRF   29
....................     output_high(ROW2); 
0422:  BSF    03.5
0423:  BCF    06.6
0424:  BCF    03.5
0425:  BSF    06.6
....................      
....................          
....................     output_low(ROW3); 
0426:  BSF    03.5
0427:  BCF    06.5
0428:  BCF    03.5
0429:  BCF    06.5
....................     if (!input(COL3)) 
042A:  BSF    03.5
042B:  BSF    06.1
042C:  BCF    03.5
042D:  BTFSC  06.1
042E:  GOTO   441
....................     { 
....................       for(int i=0; i<100 ;i++) 
042F:  CLRF   34
0430:  MOVF   34,W
0431:  SUBLW  63
0432:  BTFSS  03.0
0433:  GOTO   43B
....................       { 
....................          if (!input(COL3)) 
0434:  BSF    03.5
0435:  BSF    06.1
0436:  BCF    03.5
0437:  BTFSS  06.1
....................             count++; 
0438:  INCF   29,F
0439:  INCF   34,F
043A:  GOTO   430
....................       } 
....................       if(count>50) 
043B:  MOVF   29,W
043C:  SUBLW  32
043D:  BTFSC  03.0
043E:  GOTO   441
....................       {  key= '9';   }   
043F:  MOVLW  39
0440:  MOVWF  28
....................     } 
....................     count=0; 
0441:  CLRF   29
....................     output_high(ROW3); 
0442:  BSF    03.5
0443:  BCF    06.5
0444:  BCF    03.5
0445:  BSF    06.5
....................      
....................          
....................     output_low(ROW4); 
0446:  BSF    03.5
0447:  BCF    06.4
0448:  BCF    03.5
0449:  BCF    06.4
....................     if (!input(COL3)) 
044A:  BSF    03.5
044B:  BSF    06.1
044C:  BCF    03.5
044D:  BTFSC  06.1
044E:  GOTO   461
....................     { 
....................       for(int i=0; i<100 ;i++) 
044F:  CLRF   35
0450:  MOVF   35,W
0451:  SUBLW  63
0452:  BTFSS  03.0
0453:  GOTO   45B
....................       { 
....................          if (!input(COL3)) 
0454:  BSF    03.5
0455:  BSF    06.1
0456:  BCF    03.5
0457:  BTFSS  06.1
....................             count++; 
0458:  INCF   29,F
0459:  INCF   35,F
045A:  GOTO   450
....................       } 
....................       if(count>50) 
045B:  MOVF   29,W
045C:  SUBLW  32
045D:  BTFSC  03.0
045E:  GOTO   461
....................       {  key= '#';   }   
045F:  MOVLW  23
0460:  MOVWF  28
....................     } 
....................     count=0; 
0461:  CLRF   29
....................     output_high(ROW4);     
0462:  BSF    03.5
0463:  BCF    06.4
0464:  BCF    03.5
0465:  BSF    06.4
.................... /////////////////////////////////////////    
....................      output_low(ROW1); 
0466:  BSF    03.5
0467:  BCF    06.7
0468:  BCF    03.5
0469:  BCF    06.7
....................     if (!input(COL4)) 
046A:  BSF    03.5
046B:  BSF    06.0
046C:  BCF    03.5
046D:  BTFSC  06.0
046E:  GOTO   481
....................     { 
....................       for(int i=0; i<100 ;i++) 
046F:  CLRF   36
0470:  MOVF   36,W
0471:  SUBLW  63
0472:  BTFSS  03.0
0473:  GOTO   47B
....................       { 
....................          if (!input(COL4)) 
0474:  BSF    03.5
0475:  BSF    06.0
0476:  BCF    03.5
0477:  BTFSS  06.0
....................             count++; 
0478:  INCF   29,F
0479:  INCF   36,F
047A:  GOTO   470
....................       } 
....................       if(count>50) 
047B:  MOVF   29,W
047C:  SUBLW  32
047D:  BTFSC  03.0
047E:  GOTO   481
....................       {  key= 'A';   }   
047F:  MOVLW  41
0480:  MOVWF  28
....................     } 
....................     count=0; 
0481:  CLRF   29
....................     output_high(ROW1); 
0482:  BSF    03.5
0483:  BCF    06.7
0484:  BCF    03.5
0485:  BSF    06.7
....................      
....................     output_low(ROW2); 
0486:  BSF    03.5
0487:  BCF    06.6
0488:  BCF    03.5
0489:  BCF    06.6
....................     if (!input(COL4)) 
048A:  BSF    03.5
048B:  BSF    06.0
048C:  BCF    03.5
048D:  BTFSC  06.0
048E:  GOTO   4A1
....................     { 
....................       for(int i=0; i<100 ;i++) 
048F:  CLRF   37
0490:  MOVF   37,W
0491:  SUBLW  63
0492:  BTFSS  03.0
0493:  GOTO   49B
....................       { 
....................          if (!input(COL4)) 
0494:  BSF    03.5
0495:  BSF    06.0
0496:  BCF    03.5
0497:  BTFSS  06.0
....................             count++; 
0498:  INCF   29,F
0499:  INCF   37,F
049A:  GOTO   490
....................       } 
....................       if(count>50) 
049B:  MOVF   29,W
049C:  SUBLW  32
049D:  BTFSC  03.0
049E:  GOTO   4A1
....................       {  key= 'B';   }   
049F:  MOVLW  42
04A0:  MOVWF  28
....................     } 
....................     count=0; 
04A1:  CLRF   29
....................     output_high(ROW2); 
04A2:  BSF    03.5
04A3:  BCF    06.6
04A4:  BCF    03.5
04A5:  BSF    06.6
....................      
....................          
....................     output_low(ROW3); 
04A6:  BSF    03.5
04A7:  BCF    06.5
04A8:  BCF    03.5
04A9:  BCF    06.5
....................     if (!input(COL4)) 
04AA:  BSF    03.5
04AB:  BSF    06.0
04AC:  BCF    03.5
04AD:  BTFSC  06.0
04AE:  GOTO   4C1
....................     { 
....................       for(int i=0; i<100 ;i++) 
04AF:  CLRF   38
04B0:  MOVF   38,W
04B1:  SUBLW  63
04B2:  BTFSS  03.0
04B3:  GOTO   4BB
....................       { 
....................          if (!input(COL4)) 
04B4:  BSF    03.5
04B5:  BSF    06.0
04B6:  BCF    03.5
04B7:  BTFSS  06.0
....................             count++; 
04B8:  INCF   29,F
04B9:  INCF   38,F
04BA:  GOTO   4B0
....................       } 
....................       if(count>50) 
04BB:  MOVF   29,W
04BC:  SUBLW  32
04BD:  BTFSC  03.0
04BE:  GOTO   4C1
....................       {  key= 'C';   }   
04BF:  MOVLW  43
04C0:  MOVWF  28
....................     } 
....................     count=0; 
04C1:  CLRF   29
....................     output_high(ROW3); 
04C2:  BSF    03.5
04C3:  BCF    06.5
04C4:  BCF    03.5
04C5:  BSF    06.5
....................      
....................          
....................     output_low(ROW4); 
04C6:  BSF    03.5
04C7:  BCF    06.4
04C8:  BCF    03.5
04C9:  BCF    06.4
....................     if (!input(COL4)) 
04CA:  BSF    03.5
04CB:  BSF    06.0
04CC:  BCF    03.5
04CD:  BTFSC  06.0
04CE:  GOTO   4E1
....................     { 
....................       for(int i=0; i<100 ;i++) 
04CF:  CLRF   39
04D0:  MOVF   39,W
04D1:  SUBLW  63
04D2:  BTFSS  03.0
04D3:  GOTO   4DB
....................       { 
....................          if (!input(COL4)) 
04D4:  BSF    03.5
04D5:  BSF    06.0
04D6:  BCF    03.5
04D7:  BTFSS  06.0
....................             count++; 
04D8:  INCF   29,F
04D9:  INCF   39,F
04DA:  GOTO   4D0
....................       } 
....................       if(count>50) 
04DB:  MOVF   29,W
04DC:  SUBLW  32
04DD:  BTFSC  03.0
04DE:  GOTO   4E1
....................       {  key= 'D';   }   
04DF:  MOVLW  44
04E0:  MOVWF  28
....................     } 
....................     count=0; 
04E1:  CLRF   29
....................     output_high(ROW4);      
04E2:  BSF    03.5
04E3:  BCF    06.4
04E4:  BCF    03.5
04E5:  BSF    06.4
....................      
....................     return key; 
04E6:  MOVF   28,W
04E7:  MOVWF  78
04E8:  BSF    0A.3
04E9:  BCF    0A.4
04EA:  GOTO   040 (RETURN)
.................... } 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  FF
0804:  MOVWF  20
0805:  BSF    03.5
0806:  BSF    1F.0
0807:  BSF    1F.1
0808:  BSF    1F.2
0809:  BCF    1F.3
080A:  MOVLW  07
080B:  MOVWF  1C
080C:  BCF    03.7
.................... {   
....................     keypadinit(); 
080D:  BCF    0A.3
080E:  BCF    03.5
080F:  GOTO   0A9
0810:  BSF    0A.3
....................     lcd_init(); 
0811:  BCF    0A.3
0812:  GOTO   1AC
0813:  BSF    0A.3
....................     ledcheck(); 
0814:  BCF    0A.3
0815:  GOTO   204
0816:  BSF    0A.3
....................      
....................     char key=0; 
0817:  CLRF   21
....................      
....................     //communic 
....................     output_low(PIN_D1); 
0818:  BSF    03.5
0819:  BCF    08.1
081A:  BCF    03.5
081B:  BCF    08.1
....................     output_low(PIN_A1); 
081C:  MOVLW  FE
081D:  BSF    03.5
081E:  MOVWF  05
081F:  BCF    03.5
0820:  BCF    05.1
....................     output_low(PIN_D2); 
0821:  BSF    03.5
0822:  BCF    08.2
0823:  BCF    03.5
0824:  BCF    08.2
....................     lcd_putc("\fReady...\n"); 
0825:  MOVLW  17
0826:  BSF    03.6
0827:  MOVWF  0D
0828:  MOVLW  00
0829:  MOVWF  0F
082A:  BCF    0A.3
082B:  BCF    03.6
082C:  CALL   25D
082D:  BSF    0A.3
....................   
....................     lcd_putc("\f"); 
082E:  MOVLW  1D
082F:  BSF    03.6
0830:  MOVWF  0D
0831:  MOVLW  00
0832:  MOVWF  0F
0833:  BCF    0A.3
0834:  BCF    03.6
0835:  CALL   25D
0836:  BSF    0A.3
....................  
....................    while(TRUE) 
....................    {    
....................      key='e'; 
0837:  MOVLW  65
0838:  MOVWF  21
....................      lcdDisplayMenu(); 
0839:  BCF    0A.3
083A:  GOTO   2B3
083B:  BSF    0A.3
....................      key = keypadScan(key); 
083C:  MOVF   21,W
083D:  MOVWF  28
083E:  BCF    0A.3
083F:  GOTO   2E5
0840:  BSF    0A.3
0841:  MOVF   78,W
0842:  MOVWF  21
....................      if (key != 'e') { 
0843:  MOVF   21,W
0844:  SUBLW  65
0845:  BTFSC  03.2
0846:  GOTO   39E
....................             lcd_putc("\f"); 
0847:  MOVLW  1E
0848:  BSF    03.6
0849:  MOVWF  0D
084A:  MOVLW  00
084B:  MOVWF  0F
084C:  BCF    0A.3
084D:  BCF    03.6
084E:  CALL   25D
084F:  BSF    0A.3
....................             switch (key) { 
0850:  MOVF   21,W
0851:  XORLW  31
0852:  BTFSC  03.2
0853:  GOTO   082
0854:  XORLW  03
0855:  BTFSC  03.2
0856:  GOTO   09B
0857:  XORLW  01
0858:  BTFSC  03.2
0859:  GOTO   194
085A:  XORLW  07
085B:  BTFSC  03.2
085C:  GOTO   1AD
085D:  XORLW  01
085E:  BTFSC  03.2
085F:  GOTO   1C6
0860:  XORLW  03
0861:  BTFSC  03.2
0862:  GOTO   215
0863:  XORLW  01
0864:  BTFSC  03.2
0865:  GOTO   264
0866:  XORLW  0F
0867:  BTFSC  03.2
0868:  GOTO   2B3
0869:  XORLW  01
086A:  BTFSC  03.2
086B:  GOTO   2CC
086C:  XORLW  09
086D:  BTFSC  03.2
086E:  GOTO   2E5
086F:  XORLW  1A
0870:  BTFSC  03.2
0871:  GOTO   2FE
0872:  XORLW  6B
0873:  BTFSC  03.2
0874:  GOTO   317
0875:  XORLW  03
0876:  BTFSC  03.2
0877:  GOTO   330
0878:  XORLW  01
0879:  BTFSC  03.2
087A:  GOTO   349
087B:  XORLW  07
087C:  BTFSC  03.2
087D:  GOTO   362
087E:  XORLW  67
087F:  BTFSC  03.2
0880:  GOTO   37B
0881:  GOTO   394
....................                 case '1': 
....................                 lcd_gotoxy(1, 1); 
0882:  MOVLW  01
0883:  MOVWF  2C
0884:  MOVWF  2D
0885:  BCF    0A.3
0886:  CALL   21F
0887:  BSF    0A.3
....................                     printf(lcd_putc, "Starting..."); 
0888:  MOVLW  1F
0889:  BSF    03.6
088A:  MOVWF  0D
088B:  MOVLW  00
088C:  MOVWF  0F
088D:  BCF    0A.3
088E:  BCF    03.6
088F:  CALL   25D
0890:  BSF    0A.3
....................                     delay_ms(1000); 
0891:  MOVLW  04
0892:  MOVWF  28
0893:  MOVLW  FA
0894:  MOVWF  2D
0895:  BCF    0A.3
0896:  CALL   0BF
0897:  BSF    0A.3
0898:  DECFSZ 28,F
0899:  GOTO   093
....................                     //TO BE CONTINUED 
....................                     break; 
089A:  GOTO   394
....................  
....................                 case '2': 
....................                 lcd_gotoxy(1, 1); 
089B:  MOVLW  01
089C:  MOVWF  2C
089D:  MOVWF  2D
089E:  BCF    0A.3
089F:  CALL   21F
08A0:  BSF    0A.3
....................                     printf(lcd_putc, "Testing..."); 
08A1:  MOVLW  25
08A2:  BSF    03.6
08A3:  MOVWF  0D
08A4:  MOVLW  00
08A5:  MOVWF  0F
08A6:  BCF    0A.3
08A7:  BCF    03.6
08A8:  CALL   25D
08A9:  BSF    0A.3
....................                     delay_ms(1000); 
08AA:  MOVLW  04
08AB:  MOVWF  28
08AC:  MOVLW  FA
08AD:  MOVWF  2D
08AE:  BCF    0A.3
08AF:  CALL   0BF
08B0:  BSF    0A.3
08B1:  DECFSZ 28,F
08B2:  GOTO   0AC
....................                  ///theta test 
....................                  lcd_gotoxy(1, 1); 
08B3:  MOVLW  01
08B4:  MOVWF  2C
08B5:  MOVWF  2D
08B6:  BCF    0A.3
08B7:  CALL   21F
08B8:  BSF    0A.3
....................                     printf(lcd_putc, "Test theta"); 
08B9:  MOVLW  2B
08BA:  BSF    03.6
08BB:  MOVWF  0D
08BC:  MOVLW  00
08BD:  MOVWF  0F
08BE:  BCF    0A.3
08BF:  BCF    03.6
08C0:  CALL   25D
08C1:  BSF    0A.3
....................                     delay_ms(1000); 
08C2:  MOVLW  04
08C3:  MOVWF  28
08C4:  MOVLW  FA
08C5:  MOVWF  2D
08C6:  BCF    0A.3
08C7:  CALL   0BF
08C8:  BSF    0A.3
08C9:  DECFSZ 28,F
08CA:  GOTO   0C4
....................                     char error2 = nextTheta(); 
08CB:  BCF    0A.3
08CC:  CALL   4EB
08CD:  BSF    0A.3
08CE:  MOVF   78,W
08CF:  MOVWF  22
....................                     if(error2) 
08D0:  MOVF   22,F
08D1:  BTFSC  03.2
08D2:  GOTO   0E4
....................                     { 
....................                         lcd_gotoxy(12, 1); 
08D3:  MOVLW  0C
08D4:  MOVWF  2C
08D5:  MOVLW  01
08D6:  MOVWF  2D
08D7:  BCF    0A.3
08D8:  CALL   21F
08D9:  BSF    0A.3
....................                         printf(lcd_putc, "error"); 
08DA:  MOVLW  31
08DB:  BSF    03.6
08DC:  MOVWF  0D
08DD:  MOVLW  00
08DE:  MOVWF  0F
08DF:  BCF    0A.3
08E0:  BCF    03.6
08E1:  CALL   25D
08E2:  BSF    0A.3
....................                     } 
08E3:  GOTO   0F4
....................                     else 
....................                     { 
....................                         lcd_gotoxy(12, 1); 
08E4:  MOVLW  0C
08E5:  MOVWF  2C
08E6:  MOVLW  01
08E7:  MOVWF  2D
08E8:  BCF    0A.3
08E9:  CALL   21F
08EA:  BSF    0A.3
....................                         printf(lcd_putc, "DONE!!!");    
08EB:  MOVLW  34
08EC:  BSF    03.6
08ED:  MOVWF  0D
08EE:  MOVLW  00
08EF:  MOVWF  0F
08F0:  BCF    0A.3
08F1:  BCF    03.6
08F2:  CALL   25D
08F3:  BSF    0A.3
....................                     } 
....................                     delay_ms(1000); 
08F4:  MOVLW  04
08F5:  MOVWF  28
08F6:  MOVLW  FA
08F7:  MOVWF  2D
08F8:  BCF    0A.3
08F9:  CALL   0BF
08FA:  BSF    0A.3
08FB:  DECFSZ 28,F
08FC:  GOTO   0F6
....................                   /////X test 
....................                   lcd_gotoxy(1, 2); 
08FD:  MOVLW  01
08FE:  MOVWF  2C
08FF:  MOVLW  02
0900:  MOVWF  2D
0901:  BCF    0A.3
0902:  CALL   21F
0903:  BSF    0A.3
....................                     printf(lcd_putc, "TEST X AXIS"); 
0904:  MOVLW  38
0905:  BSF    03.6
0906:  MOVWF  0D
0907:  MOVLW  00
0908:  MOVWF  0F
0909:  BCF    0A.3
090A:  BCF    03.6
090B:  CALL   25D
090C:  BSF    0A.3
....................                     delay_ms(1000); 
090D:  MOVLW  04
090E:  MOVWF  28
090F:  MOVLW  FA
0910:  MOVWF  2D
0911:  BCF    0A.3
0912:  CALL   0BF
0913:  BSF    0A.3
0914:  DECFSZ 28,F
0915:  GOTO   10F
....................                     char error1 = GoToNextX(); 
0916:  BCF    0A.3
0917:  CALL   509
0918:  BSF    0A.3
0919:  MOVF   78,W
091A:  MOVWF  23
....................                     if(error1) 
091B:  MOVF   23,F
091C:  BTFSC  03.2
091D:  GOTO   12F
....................                     { 
....................                         lcd_gotoxy(13, 2); 
091E:  MOVLW  0D
091F:  MOVWF  2C
0920:  MOVLW  02
0921:  MOVWF  2D
0922:  BCF    0A.3
0923:  CALL   21F
0924:  BSF    0A.3
....................                         printf(lcd_putc, "error");                        
0925:  MOVLW  3E
0926:  BSF    03.6
0927:  MOVWF  0D
0928:  MOVLW  00
0929:  MOVWF  0F
092A:  BCF    0A.3
092B:  BCF    03.6
092C:  CALL   25D
092D:  BSF    0A.3
....................                     } 
092E:  GOTO   13F
....................                     else 
....................                     { 
....................                         lcd_gotoxy(13, 2); 
092F:  MOVLW  0D
0930:  MOVWF  2C
0931:  MOVLW  02
0932:  MOVWF  2D
0933:  BCF    0A.3
0934:  CALL   21F
0935:  BSF    0A.3
....................                         printf(lcd_putc, "DONE!!!"); 
0936:  MOVLW  41
0937:  BSF    03.6
0938:  MOVWF  0D
0939:  MOVLW  00
093A:  MOVWF  0F
093B:  BCF    0A.3
093C:  BCF    03.6
093D:  CALL   25D
093E:  BSF    0A.3
....................                     } 
....................                     delay_ms(1000); 
093F:  MOVLW  04
0940:  MOVWF  28
0941:  MOVLW  FA
0942:  MOVWF  2D
0943:  BCF    0A.3
0944:  CALL   0BF
0945:  BSF    0A.3
0946:  DECFSZ 28,F
0947:  GOTO   141
....................                 ////Z test 
....................                 lcd_gotoxy(21, 1); 
0948:  MOVLW  15
0949:  MOVWF  2C
094A:  MOVLW  01
094B:  MOVWF  2D
094C:  BCF    0A.3
094D:  CALL   21F
094E:  BSF    0A.3
....................                     printf(lcd_putc, "TEST Z AXIS"); 
094F:  MOVLW  45
0950:  BSF    03.6
0951:  MOVWF  0D
0952:  MOVLW  00
0953:  MOVWF  0F
0954:  BCF    0A.3
0955:  BCF    03.6
0956:  CALL   25D
0957:  BSF    0A.3
....................                     delay_ms(1000); 
0958:  MOVLW  04
0959:  MOVWF  28
095A:  MOVLW  FA
095B:  MOVWF  2D
095C:  BCF    0A.3
095D:  CALL   0BF
095E:  BSF    0A.3
095F:  DECFSZ 28,F
0960:  GOTO   15A
....................                     char error3 = GoToZComplement(); 
0961:  BCF    0A.3
0962:  CALL   523
0963:  BSF    0A.3
0964:  MOVF   78,W
0965:  MOVWF  24
....................                     if(error3) 
0966:  MOVF   24,F
0967:  BTFSC  03.2
0968:  GOTO   17A
....................                     { 
....................                         lcd_gotoxy(35, 1); 
0969:  MOVLW  23
096A:  MOVWF  2C
096B:  MOVLW  01
096C:  MOVWF  2D
096D:  BCF    0A.3
096E:  CALL   21F
096F:  BSF    0A.3
....................                         printf(lcd_putc, "error");                        
0970:  MOVLW  4B
0971:  BSF    03.6
0972:  MOVWF  0D
0973:  MOVLW  00
0974:  MOVWF  0F
0975:  BCF    0A.3
0976:  BCF    03.6
0977:  CALL   25D
0978:  BSF    0A.3
....................                     } 
0979:  GOTO   18A
....................                     else 
....................                     { 
....................                         lcd_gotoxy(35, 1); 
097A:  MOVLW  23
097B:  MOVWF  2C
097C:  MOVLW  01
097D:  MOVWF  2D
097E:  BCF    0A.3
097F:  CALL   21F
0980:  BSF    0A.3
....................                         printf(lcd_putc, "DONE!!!"); 
0981:  MOVLW  4E
0982:  BSF    03.6
0983:  MOVWF  0D
0984:  MOVLW  00
0985:  MOVWF  0F
0986:  BCF    0A.3
0987:  BCF    03.6
0988:  CALL   25D
0989:  BSF    0A.3
....................                     } 
....................                     delay_ms(4000); 
098A:  MOVLW  10
098B:  MOVWF  28
098C:  MOVLW  FA
098D:  MOVWF  2D
098E:  BCF    0A.3
098F:  CALL   0BF
0990:  BSF    0A.3
0991:  DECFSZ 28,F
0992:  GOTO   18C
....................                     break; 
0993:  GOTO   394
....................  
....................                 case '3': 
....................                 lcd_gotoxy(1, 1); 
0994:  MOVLW  01
0995:  MOVWF  2C
0996:  MOVWF  2D
0997:  BCF    0A.3
0998:  CALL   21F
0999:  BSF    0A.3
....................                     printf(lcd_putc, "Settings..."); 
099A:  MOVLW  52
099B:  BSF    03.6
099C:  MOVWF  0D
099D:  MOVLW  00
099E:  MOVWF  0F
099F:  BCF    0A.3
09A0:  BCF    03.6
09A1:  CALL   25D
09A2:  BSF    0A.3
....................                     delay_ms(1000); 
09A3:  MOVLW  04
09A4:  MOVWF  28
09A5:  MOVLW  FA
09A6:  MOVWF  2D
09A7:  BCF    0A.3
09A8:  CALL   0BF
09A9:  BSF    0A.3
09AA:  DECFSZ 28,F
09AB:  GOTO   1A5
....................                     break; 
09AC:  GOTO   394
....................  
....................                 case '4': 
....................                 lcd_gotoxy(1, 1); 
09AD:  MOVLW  01
09AE:  MOVWF  2C
09AF:  MOVWF  2D
09B0:  BCF    0A.3
09B1:  CALL   21F
09B2:  BSF    0A.3
....................                     printf(lcd_putc, "More Options..."); 
09B3:  MOVLW  58
09B4:  BSF    03.6
09B5:  MOVWF  0D
09B6:  MOVLW  00
09B7:  MOVWF  0F
09B8:  BCF    0A.3
09B9:  BCF    03.6
09BA:  CALL   25D
09BB:  BSF    0A.3
....................                     delay_ms(1000); 
09BC:  MOVLW  04
09BD:  MOVWF  28
09BE:  MOVLW  FA
09BF:  MOVWF  2D
09C0:  BCF    0A.3
09C1:  CALL   0BF
09C2:  BSF    0A.3
09C3:  DECFSZ 28,F
09C4:  GOTO   1BE
....................                     break; 
09C5:  GOTO   394
....................                  case '5': 
....................                 lcd_gotoxy(1, 1); 
09C6:  MOVLW  01
09C7:  MOVWF  2C
09C8:  MOVWF  2D
09C9:  BCF    0A.3
09CA:  CALL   21F
09CB:  BSF    0A.3
....................                     printf(lcd_putc, "TEST X AXIS"); 
09CC:  MOVLW  60
09CD:  BSF    03.6
09CE:  MOVWF  0D
09CF:  MOVLW  00
09D0:  MOVWF  0F
09D1:  BCF    0A.3
09D2:  BCF    03.6
09D3:  CALL   25D
09D4:  BSF    0A.3
....................                     delay_ms(1000); 
09D5:  MOVLW  04
09D6:  MOVWF  28
09D7:  MOVLW  FA
09D8:  MOVWF  2D
09D9:  BCF    0A.3
09DA:  CALL   0BF
09DB:  BSF    0A.3
09DC:  DECFSZ 28,F
09DD:  GOTO   1D7
....................                     char error4 = GoToNextX(); 
09DE:  BCF    0A.3
09DF:  CALL   509
09E0:  BSF    0A.3
09E1:  MOVF   78,W
09E2:  MOVWF  25
....................                     if(error4) 
09E3:  MOVF   25,F
09E4:  BTFSC  03.2
09E5:  GOTO   1F9
....................                     { 
....................                         lcd_putc("\f"); 
09E6:  MOVLW  66
09E7:  BSF    03.6
09E8:  MOVWF  0D
09E9:  MOVLW  00
09EA:  MOVWF  0F
09EB:  BCF    0A.3
09EC:  BCF    03.6
09ED:  CALL   25D
09EE:  BSF    0A.3
....................                         printf(lcd_putc, "error");                        
09EF:  MOVLW  67
09F0:  BSF    03.6
09F1:  MOVWF  0D
09F2:  MOVLW  00
09F3:  MOVWF  0F
09F4:  BCF    0A.3
09F5:  BCF    03.6
09F6:  CALL   25D
09F7:  BSF    0A.3
....................                     } 
09F8:  GOTO   20B
....................                     else 
....................                     { 
....................                         lcd_putc("\f"); 
09F9:  MOVLW  6A
09FA:  BSF    03.6
09FB:  MOVWF  0D
09FC:  MOVLW  00
09FD:  MOVWF  0F
09FE:  BCF    0A.3
09FF:  BCF    03.6
0A00:  CALL   25D
0A01:  BSF    0A.3
....................                         printf(lcd_putc, "DONE!!!"); 
0A02:  MOVLW  6B
0A03:  BSF    03.6
0A04:  MOVWF  0D
0A05:  MOVLW  00
0A06:  MOVWF  0F
0A07:  BCF    0A.3
0A08:  BCF    03.6
0A09:  CALL   25D
0A0A:  BSF    0A.3
....................                     } 
....................                     delay_ms(1000); 
0A0B:  MOVLW  04
0A0C:  MOVWF  28
0A0D:  MOVLW  FA
0A0E:  MOVWF  2D
0A0F:  BCF    0A.3
0A10:  CALL   0BF
0A11:  BSF    0A.3
0A12:  DECFSZ 28,F
0A13:  GOTO   20D
....................                     break;  
0A14:  GOTO   394
....................                  case '6': 
....................                 lcd_gotoxy(1, 1); 
0A15:  MOVLW  01
0A16:  MOVWF  2C
0A17:  MOVWF  2D
0A18:  BCF    0A.3
0A19:  CALL   21F
0A1A:  BSF    0A.3
....................                     printf(lcd_putc, "Test theta"); 
0A1B:  MOVLW  6F
0A1C:  BSF    03.6
0A1D:  MOVWF  0D
0A1E:  MOVLW  00
0A1F:  MOVWF  0F
0A20:  BCF    0A.3
0A21:  BCF    03.6
0A22:  CALL   25D
0A23:  BSF    0A.3
....................                     delay_ms(1000); 
0A24:  MOVLW  04
0A25:  MOVWF  28
0A26:  MOVLW  FA
0A27:  MOVWF  2D
0A28:  BCF    0A.3
0A29:  CALL   0BF
0A2A:  BSF    0A.3
0A2B:  DECFSZ 28,F
0A2C:  GOTO   226
....................                     char error5 = nextTheta(); 
0A2D:  BCF    0A.3
0A2E:  CALL   4EB
0A2F:  BSF    0A.3
0A30:  MOVF   78,W
0A31:  MOVWF  26
....................                     if(error5) 
0A32:  MOVF   26,F
0A33:  BTFSC  03.2
0A34:  GOTO   248
....................                     { 
....................                         lcd_putc("\f"); 
0A35:  MOVLW  75
0A36:  BSF    03.6
0A37:  MOVWF  0D
0A38:  MOVLW  00
0A39:  MOVWF  0F
0A3A:  BCF    0A.3
0A3B:  BCF    03.6
0A3C:  CALL   25D
0A3D:  BSF    0A.3
....................                         printf(lcd_putc, "error"); 
0A3E:  MOVLW  76
0A3F:  BSF    03.6
0A40:  MOVWF  0D
0A41:  MOVLW  00
0A42:  MOVWF  0F
0A43:  BCF    0A.3
0A44:  BCF    03.6
0A45:  CALL   25D
0A46:  BSF    0A.3
....................                     } 
0A47:  GOTO   25A
....................                     else 
....................                     { 
....................                         lcd_putc("\f"); 
0A48:  MOVLW  79
0A49:  BSF    03.6
0A4A:  MOVWF  0D
0A4B:  MOVLW  00
0A4C:  MOVWF  0F
0A4D:  BCF    0A.3
0A4E:  BCF    03.6
0A4F:  CALL   25D
0A50:  BSF    0A.3
....................                         printf(lcd_putc, "DONE!!!");    
0A51:  MOVLW  7A
0A52:  BSF    03.6
0A53:  MOVWF  0D
0A54:  MOVLW  00
0A55:  MOVWF  0F
0A56:  BCF    0A.3
0A57:  BCF    03.6
0A58:  CALL   25D
0A59:  BSF    0A.3
....................                     } 
....................                     delay_ms(1000); 
0A5A:  MOVLW  04
0A5B:  MOVWF  28
0A5C:  MOVLW  FA
0A5D:  MOVWF  2D
0A5E:  BCF    0A.3
0A5F:  CALL   0BF
0A60:  BSF    0A.3
0A61:  DECFSZ 28,F
0A62:  GOTO   25C
....................                     break;  
0A63:  GOTO   394
....................                 case '7': 
....................                   lcd_gotoxy(1, 1); 
0A64:  MOVLW  01
0A65:  MOVWF  2C
0A66:  MOVWF  2D
0A67:  BCF    0A.3
0A68:  CALL   21F
0A69:  BSF    0A.3
....................                     printf(lcd_putc, "TEST Z AXIS"); 
0A6A:  MOVLW  7E
0A6B:  BSF    03.6
0A6C:  MOVWF  0D
0A6D:  MOVLW  00
0A6E:  MOVWF  0F
0A6F:  BCF    0A.3
0A70:  BCF    03.6
0A71:  CALL   25D
0A72:  BSF    0A.3
....................                     delay_ms(1000); 
0A73:  MOVLW  04
0A74:  MOVWF  28
0A75:  MOVLW  FA
0A76:  MOVWF  2D
0A77:  BCF    0A.3
0A78:  CALL   0BF
0A79:  BSF    0A.3
0A7A:  DECFSZ 28,F
0A7B:  GOTO   275
....................                     char error6 = GoToZComplement(); 
0A7C:  BCF    0A.3
0A7D:  CALL   523
0A7E:  BSF    0A.3
0A7F:  MOVF   78,W
0A80:  MOVWF  27
....................                     if(error6) 
0A81:  MOVF   27,F
0A82:  BTFSC  03.2
0A83:  GOTO   297
....................                     { 
....................                         lcd_putc("\f"); 
0A84:  MOVLW  84
0A85:  BSF    03.6
0A86:  MOVWF  0D
0A87:  MOVLW  00
0A88:  MOVWF  0F
0A89:  BCF    0A.3
0A8A:  BCF    03.6
0A8B:  CALL   25D
0A8C:  BSF    0A.3
....................                         printf(lcd_putc, "error");                        
0A8D:  MOVLW  85
0A8E:  BSF    03.6
0A8F:  MOVWF  0D
0A90:  MOVLW  00
0A91:  MOVWF  0F
0A92:  BCF    0A.3
0A93:  BCF    03.6
0A94:  CALL   25D
0A95:  BSF    0A.3
....................                     } 
0A96:  GOTO   2A9
....................                     else 
....................                     { 
....................                         lcd_putc("\f"); 
0A97:  MOVLW  88
0A98:  BSF    03.6
0A99:  MOVWF  0D
0A9A:  MOVLW  00
0A9B:  MOVWF  0F
0A9C:  BCF    0A.3
0A9D:  BCF    03.6
0A9E:  CALL   25D
0A9F:  BSF    0A.3
....................                         printf(lcd_putc, "DONE!!!"); 
0AA0:  MOVLW  89
0AA1:  BSF    03.6
0AA2:  MOVWF  0D
0AA3:  MOVLW  00
0AA4:  MOVWF  0F
0AA5:  BCF    0A.3
0AA6:  BCF    03.6
0AA7:  CALL   25D
0AA8:  BSF    0A.3
....................                     } 
....................                     delay_ms(1000); 
0AA9:  MOVLW  04
0AAA:  MOVWF  28
0AAB:  MOVLW  FA
0AAC:  MOVWF  2D
0AAD:  BCF    0A.3
0AAE:  CALL   0BF
0AAF:  BSF    0A.3
0AB0:  DECFSZ 28,F
0AB1:  GOTO   2AB
....................                     break;  
0AB2:  GOTO   394
....................                case '8': 
....................                 lcd_gotoxy(1, 1); 
0AB3:  MOVLW  01
0AB4:  MOVWF  2C
0AB5:  MOVWF  2D
0AB6:  BCF    0A.3
0AB7:  CALL   21F
0AB8:  BSF    0A.3
....................                     printf(lcd_putc, "8..."); 
0AB9:  MOVLW  8D
0ABA:  BSF    03.6
0ABB:  MOVWF  0D
0ABC:  MOVLW  00
0ABD:  MOVWF  0F
0ABE:  BCF    0A.3
0ABF:  BCF    03.6
0AC0:  CALL   25D
0AC1:  BSF    0A.3
....................                     delay_ms(1000); 
0AC2:  MOVLW  04
0AC3:  MOVWF  28
0AC4:  MOVLW  FA
0AC5:  MOVWF  2D
0AC6:  BCF    0A.3
0AC7:  CALL   0BF
0AC8:  BSF    0A.3
0AC9:  DECFSZ 28,F
0ACA:  GOTO   2C4
....................                     break; 
0ACB:  GOTO   394
....................                case '9': 
....................                 lcd_gotoxy(1, 1); 
0ACC:  MOVLW  01
0ACD:  MOVWF  2C
0ACE:  MOVWF  2D
0ACF:  BCF    0A.3
0AD0:  CALL   21F
0AD1:  BSF    0A.3
....................                     printf(lcd_putc, "9..."); 
0AD2:  MOVLW  90
0AD3:  BSF    03.6
0AD4:  MOVWF  0D
0AD5:  MOVLW  00
0AD6:  MOVWF  0F
0AD7:  BCF    0A.3
0AD8:  BCF    03.6
0AD9:  CALL   25D
0ADA:  BSF    0A.3
....................                     delay_ms(1000); 
0ADB:  MOVLW  04
0ADC:  MOVWF  28
0ADD:  MOVLW  FA
0ADE:  MOVWF  2D
0ADF:  BCF    0A.3
0AE0:  CALL   0BF
0AE1:  BSF    0A.3
0AE2:  DECFSZ 28,F
0AE3:  GOTO   2DD
....................                     break; 
0AE4:  GOTO   394
....................                case '0': 
....................                 lcd_gotoxy(1, 1); 
0AE5:  MOVLW  01
0AE6:  MOVWF  2C
0AE7:  MOVWF  2D
0AE8:  BCF    0A.3
0AE9:  CALL   21F
0AEA:  BSF    0A.3
....................                     printf(lcd_putc, "0..."); 
0AEB:  MOVLW  93
0AEC:  BSF    03.6
0AED:  MOVWF  0D
0AEE:  MOVLW  00
0AEF:  MOVWF  0F
0AF0:  BCF    0A.3
0AF1:  BCF    03.6
0AF2:  CALL   25D
0AF3:  BSF    0A.3
....................                     delay_ms(1000); 
0AF4:  MOVLW  04
0AF5:  MOVWF  28
0AF6:  MOVLW  FA
0AF7:  MOVWF  2D
0AF8:  BCF    0A.3
0AF9:  CALL   0BF
0AFA:  BSF    0A.3
0AFB:  DECFSZ 28,F
0AFC:  GOTO   2F6
....................                     break;                     
0AFD:  GOTO   394
....................                case '*': 
....................                 lcd_gotoxy(1, 1); 
0AFE:  MOVLW  01
0AFF:  MOVWF  2C
0B00:  MOVWF  2D
0B01:  BCF    0A.3
0B02:  CALL   21F
0B03:  BSF    0A.3
....................                     printf(lcd_putc, "*..."); 
0B04:  MOVLW  96
0B05:  BSF    03.6
0B06:  MOVWF  0D
0B07:  MOVLW  00
0B08:  MOVWF  0F
0B09:  BCF    0A.3
0B0A:  BCF    03.6
0B0B:  CALL   25D
0B0C:  BSF    0A.3
....................                     delay_ms(1000); 
0B0D:  MOVLW  04
0B0E:  MOVWF  28
0B0F:  MOVLW  FA
0B10:  MOVWF  2D
0B11:  BCF    0A.3
0B12:  CALL   0BF
0B13:  BSF    0A.3
0B14:  DECFSZ 28,F
0B15:  GOTO   30F
....................                     break;      
0B16:  GOTO   394
....................                 case 'A': 
....................                 lcd_gotoxy(1, 1); 
0B17:  MOVLW  01
0B18:  MOVWF  2C
0B19:  MOVWF  2D
0B1A:  BCF    0A.3
0B1B:  CALL   21F
0B1C:  BSF    0A.3
....................                     printf(lcd_putc, "A..."); 
0B1D:  MOVLW  99
0B1E:  BSF    03.6
0B1F:  MOVWF  0D
0B20:  MOVLW  00
0B21:  MOVWF  0F
0B22:  BCF    0A.3
0B23:  BCF    03.6
0B24:  CALL   25D
0B25:  BSF    0A.3
....................                     delay_ms(1000); 
0B26:  MOVLW  04
0B27:  MOVWF  28
0B28:  MOVLW  FA
0B29:  MOVWF  2D
0B2A:  BCF    0A.3
0B2B:  CALL   0BF
0B2C:  BSF    0A.3
0B2D:  DECFSZ 28,F
0B2E:  GOTO   328
....................                     break;     
0B2F:  GOTO   394
....................                 case 'B': 
....................                 lcd_gotoxy(1, 1); 
0B30:  MOVLW  01
0B31:  MOVWF  2C
0B32:  MOVWF  2D
0B33:  BCF    0A.3
0B34:  CALL   21F
0B35:  BSF    0A.3
....................                     printf(lcd_putc, "B..."); 
0B36:  MOVLW  9C
0B37:  BSF    03.6
0B38:  MOVWF  0D
0B39:  MOVLW  00
0B3A:  MOVWF  0F
0B3B:  BCF    0A.3
0B3C:  BCF    03.6
0B3D:  CALL   25D
0B3E:  BSF    0A.3
....................                     delay_ms(1000); 
0B3F:  MOVLW  04
0B40:  MOVWF  28
0B41:  MOVLW  FA
0B42:  MOVWF  2D
0B43:  BCF    0A.3
0B44:  CALL   0BF
0B45:  BSF    0A.3
0B46:  DECFSZ 28,F
0B47:  GOTO   341
....................                     break;     
0B48:  GOTO   394
....................                 case 'C': 
....................                 lcd_gotoxy(1, 1); 
0B49:  MOVLW  01
0B4A:  MOVWF  2C
0B4B:  MOVWF  2D
0B4C:  BCF    0A.3
0B4D:  CALL   21F
0B4E:  BSF    0A.3
....................                     printf(lcd_putc, "C..."); 
0B4F:  MOVLW  9F
0B50:  BSF    03.6
0B51:  MOVWF  0D
0B52:  MOVLW  00
0B53:  MOVWF  0F
0B54:  BCF    0A.3
0B55:  BCF    03.6
0B56:  CALL   25D
0B57:  BSF    0A.3
....................                     delay_ms(1000); 
0B58:  MOVLW  04
0B59:  MOVWF  28
0B5A:  MOVLW  FA
0B5B:  MOVWF  2D
0B5C:  BCF    0A.3
0B5D:  CALL   0BF
0B5E:  BSF    0A.3
0B5F:  DECFSZ 28,F
0B60:  GOTO   35A
....................                     break;     
0B61:  GOTO   394
....................                 case 'D': 
....................                 lcd_gotoxy(1, 1); 
0B62:  MOVLW  01
0B63:  MOVWF  2C
0B64:  MOVWF  2D
0B65:  BCF    0A.3
0B66:  CALL   21F
0B67:  BSF    0A.3
....................                     printf(lcd_putc, "D..."); 
0B68:  MOVLW  A2
0B69:  BSF    03.6
0B6A:  MOVWF  0D
0B6B:  MOVLW  00
0B6C:  MOVWF  0F
0B6D:  BCF    0A.3
0B6E:  BCF    03.6
0B6F:  CALL   25D
0B70:  BSF    0A.3
....................                     delay_ms(1000); 
0B71:  MOVLW  04
0B72:  MOVWF  28
0B73:  MOVLW  FA
0B74:  MOVWF  2D
0B75:  BCF    0A.3
0B76:  CALL   0BF
0B77:  BSF    0A.3
0B78:  DECFSZ 28,F
0B79:  GOTO   373
....................                     break;     
0B7A:  GOTO   394
....................                 case '#': 
....................                     lcd_gotoxy(1, 1); 
0B7B:  MOVLW  01
0B7C:  MOVWF  2C
0B7D:  MOVWF  2D
0B7E:  BCF    0A.3
0B7F:  CALL   21F
0B80:  BSF    0A.3
....................                     printf(lcd_putc, "#..."); 
0B81:  MOVLW  A5
0B82:  BSF    03.6
0B83:  MOVWF  0D
0B84:  MOVLW  00
0B85:  MOVWF  0F
0B86:  BCF    0A.3
0B87:  BCF    03.6
0B88:  CALL   25D
0B89:  BSF    0A.3
....................                     delay_ms(1000); 
0B8A:  MOVLW  04
0B8B:  MOVWF  28
0B8C:  MOVLW  FA
0B8D:  MOVWF  2D
0B8E:  BCF    0A.3
0B8F:  CALL   0BF
0B90:  BSF    0A.3
0B91:  DECFSZ 28,F
0B92:  GOTO   38C
....................                     break;     
0B93:  GOTO   394
....................                 default: 
....................                     // Handle other keys if needed 
....................                     break; 
....................             } 
....................              
....................             lcd_putc("\f"); 
0B94:  MOVLW  A8
0B95:  BSF    03.6
0B96:  MOVWF  0D
0B97:  MOVLW  00
0B98:  MOVWF  0F
0B99:  BCF    0A.3
0B9A:  BCF    03.6
0B9B:  CALL   25D
0B9C:  BSF    0A.3
....................             key = 0; // Reset the key to 0 after processing 
0B9D:  CLRF   21
....................         } 
0B9E:  GOTO   037
....................         
....................          
....................     }       
....................     return;   
.................... } 
0B9F:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
